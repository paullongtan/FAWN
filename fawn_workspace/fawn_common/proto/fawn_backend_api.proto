syntax = "proto3";

package fawn_backend_api;

service FawnBackendService {
    rpc Ping (PingRequest) returns (PingResponse);
    rpc GetValue (GetRequest) returns (GetResponse);
    // store value down the chain
    // new field: timestamp,pass_count
    // the backend should be responsible for passing the value down the chain for pass_count times
    // ex: for pass_count = 3, the backend should pass the value to the successor 3 times
    // for pass_count = 0, the backend should not pass the value down the chain
    rpc StoreValue (StoreRequest) returns (StoreResponse); 
    // for pre-copy stage, migrating data from old tail to new node
    // server-side streaming
    rpc MigrateData (MigrateDataRequest) returns (stream ValueEntry);
    // for final updata chain member stage, flushing data received after pre-copy stage from old tail to new node
    // the tail node should be responsible for documenting the data received after pre-copy stage
    // client-side streaming
    rpc FlushData (stream ValueEntry) returns (FlushDataResponse);
    // after pre-copy stage, updating the chain member
    rpc UpdateChainMember(ChainMemberInfo) returns (UpdateChainMemberResponse);
    rpc TriggerFlush(TriggerFlushRequest) returns (TriggerFlushResponse);
    rpc TriggerMerge(TriggerMergeRequest) returns (TriggerMergeResponse);
}

message NodeInfo {
    string ip = 1;
    uint32 port = 2;
    uint32 id = 3;
}

message ValueEntry {
    uint32 key_id = 1;
    bytes value = 2;
}

message PingRequest {
}

message PingResponse {
}

message GetRequest {
    uint32 key_id = 1;
}

message GetResponse {
    bytes value = 1;
}

message StoreRequest {
    uint32 key_id = 1;
    bytes value = 2;
    uint32 pass_count = 3; // how many times the value needs to be passed down the chain
}

message StoreResponse {
}

message MigrateDataRequest {
    NodeInfo dest_info = 1;
    uint32 start_id = 2;
    uint32 end_id = 3;
}

message FlushDataResponse {
}

message ChainMemberInfo {
    repeated NodeInfo chain_members = 1;
}

message UpdateChainMemberResponse {
}

message TriggerFlushRequest {
    NodeInfo new_node = 1;
}

message TriggerFlushResponse {
}

message TriggerMergeRequest {
}

message TriggerMergeResponse {
}